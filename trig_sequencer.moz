@OnLoad
  ShowLayout 1
  SetMetroSwing 0

  ppqn = 384

  // Maps step number (0-15) to knob number (first eight knobs in each row)
  stepToKnob = [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19]

  SetMetroPPQN ppqn

  LabelKnobs { }

  for step = 0 to 15
    knob = stepToKnob[step]
    note = GetKnobValue knob
    LabelKnob knob, {‚ö´Ô∏è}, (NoteName note, YES)
  endfor

  if Unassigned maxStep
    LabelKnob 8, {Length:16} 
    SetKnobValue 8, 127
    maxStep = 16
  else
    LabelKnob 8, {Length:}, maxStep
    SetKnobValue 8, (maxStep - 2) / 14 * 127
  endif

  if Unassigned mutateProb
    mutateProb = 0
  endif   
  LabelKnob 9, {Mutate}
  SetKnobValue 9, mutateProb 
  
  if Unassigned gateLength
    gateLength = 1
  endif   
  LabelKnob 10, {Gate}
  SetKnobValue 10, (gateLength - 1)/500 * 127

  lastStep = maxStep - 1
  newStep = -1

  if Unassigned trigs
    for knob = 19 to 21
      LabelKnob knob, {-}
      SetKnobValue knob, 0
      trigs[knob-19] = 0
    endfor
  else
    for knob = 19 to 21
      trigVal = trigs[knob-19]
      SetKnobValue knob, trigVal / 16 * 127
      if trigVal = 0
        LabelKnob knob, {-}
      else
        LabelKnob knob, {1/}, trigVal
      endif
    endfor
  endif
  
  Call @MySetAllPulses
@End

@OnKnobChange
  knob = LastKnob
  knobVal = (GetKnobValue knob)

  if (knob >= 0 and knob <= 7) or (knob >= 11 and knob <= 18)
    note = Round(knobVal)
    LabelKnob knob, {‚ö´Ô∏è}, (NoteName note, YES)
  elseif knob = 8
    maxStep = Round(knobVal / 127 * 14) + 2
    LabelKnob knob, {Length:}, maxStep
  elseif knob = 9
    mutateProb = knobVal
  elseif knob = 10
    gateLength = knobVal / 127 * 500 + 1
  elseif knob >= 19 and knob <= 21
    trigVal = Round(knobVal / 127 * 16)
    trigs[knob-19] = trigVal
    if trigVal = 0
      LabelKnob knob, {-}
    else
      LabelKnob knob, {1/}, trigVal
    endif
    Call @MySetAllPulses    
  endif
@End


// Sets the number of steps that each pulse position should move forward
// for the current combination of trig knobs. A zero means that this pulse
// position doesn't trigger a note. This is a very sparse array, but it's
// the most performant solution I could find.
// It needs to use two arrays because of the 1000-element array limit.
@MySetAllPulses
  for i = 0 to 1000
    pulses1[i] = 0
    pulses2[i] = 0
  endfor

  for i = 0 to 2
    v = trigs[i]
    if v > 0
      increment = ppqn * 4 / v
      floatPulse = 0.0
      while floatPulse < ppqn * 4
        pulse = Round floatPulse
        if pulse < 1000
          Inc pulses1[pulse]
        else
          Inc pulses2[pulse-1000]
        endif
        floatPulse = floatPulse + increment
      endwhile
    endif
  endfor
@End

// Calculates how many steps should the sequencer move forward
@OnMetroPulse
  addStep = 0
  p = CurrentMetroPulse
  if p < 1000
    addStep = pulses1[p]
  else
    addStep = pulses2[p-1000]
  endif

  if addStep > 0
    // If it's gonna trigger a note, it may move to a random step
    if mutateProb > Random 0, 127
      newStep = Random 0, maxStep-1
    else 
      newStep = (lastStep + addStep) % maxStep
    endif
    Call @MySendNextNote
  endif
@End


// expects newStep
// sends MIDI note stored in that step
// sets label with red icon
// saves newStep in lastStep, so in the next
// run step its icon can be cleared
@MySendNextNote
  note = GetKnobValue stepToKnob[newStep]
  SendMIDINoteOn 0, note, 100
  SendMIDINoteOff 0, note, 0, gateLength

  // mutation can make it a step trigger twice in a row
  // don't change the icon in that case
  if newStep <> lastStep
    LabelKnob stepToKnob[newStep], {üî¥}, (NoteName note, YES)
    LabelKnob stepToKnob[lastStep], {‚ö´Ô∏è}, (NoteName (GetKnobValue stepToKnob[lastStep]), YES)
    lastStep = newStep
  endif
@End

// when holding the shift button, start recording
// incoming notes from the beginning
@OnShiftDown
  recStep = 0
@End 

@OnMidiNoteOn
  if ShiftPressed 
    note = MIDINote
    knob = stepToKnob[recStep]
    SetKnobValue knob, noteVal 
    LabelKnob knob, {‚ö´Ô∏è}, (NoteName note, YES)
    recStep = (recStep + 1) % 16
  endif 
@End
